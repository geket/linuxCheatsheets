#------------------------------------------------------------
#### System Maintenance
### The Dandified YUM Package Manager
## Upgrading the system
dnf update
# Or, they do the same thing
dnf upgrade

# Signature verification failed.
sudo dnf update --refresh

#------------------------------------------------------------
### Networking
## Lost your wifi after a system upgrade?
# My issue was a known bug with atheros. 
# If you are on Qualcomm Fastconnect 7800, try this
sudo dnf downgrade atheros-firmware-20250311-1.fc42
# If this was the issue, when you upgrade your system 
# You will have to ignore the atheros-firmware package
sudo dnf upgrade --exclude atheros-firmware

# Sometimes it can also be a problem with resolved.
service systemd-resolved restart

## I had problems with nm-applet, so instead I use nmtui
dnf install NetworkManager-tui
nmtui

## Nethogs
sudo dnf install nethogs
sudo nethogs

#------------------------------------------------------------
### Nvidia
## If you are having problems with your Fn keybinds and are on a laptop
# The proprietary nvidia drivers can usually be the culprit
# Luckily one of Fedora's strengths is that it has strong support with the akmods-nvidia drivers
# Here's how I got my keybinds to work

##  Fedora + Nvidia + Secure Boot 
# Only tested for Fedora 39 and latest NVIDIA drivers!
# Secure Boot is turned ON in setup mode
# Delete ALL older NVIDIA installations!
# I recommend turning OFF 'quiet' boot option, for easier debugging, you can do it with following command:
sudo grubby --update-kernel=ALL --remove-args='quiet'
# Add rpmfusion repos
# free
sudo dnf install \   https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm 

# nonfree:
sudo dnf install \   https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm 

# 2. Full update of system:
sudo dnf upgrade --refresh 

# 3. Reboot!
# 4. Install signing modules:
sudo dnf install kmodtool akmods mokutil openssl 

# 5. Generate a key:
sudo kmodgenca -a 

# 6. Import your key, and set password to it, no need for complex passwords:
sudo mokutil --import /etc/pki/akmods/certs/public_key.der 

# 7. Reboot!
# 8. MOK manager will ask you, if you want to proceed with boot, or import the key. Pick import the key, type in a password created in (7)
# 9. Install NVIDIA drivers:
sudo dnf install gcc kernel-headers kernel-devel akmod-nvidia xorg-x11-drv-nvidia xorg-x11-drv-nvidia-libs xorg-x11-drv-nvidia-libs.i686 

# 10. Wait for modules to build! You can check build process via htop, or by typing:
modinfo -F version nvidia

# If it shows ERROR: Module nvidia not found - modules are still building, keep waiting.
# 11. Recheck, that modules built:
sudo akmods --force 

# 12. Recheck boot image update:
sudo dracut --force 

# 13 Reboot! Done. 

#------------------------------------------------------------
### Sway
## You may have the issue where sway will not start after installing these particular drivers.
# Here is how you fix this
# Login through another DE or TTY 
nano /usr/share/wayland-sessions/sway.desktop
# add --unsupported-gpu after Exec=sway 
# Write out, try to login to sway again

## Another issue you may now have with sway is that your refresh rate is not matching your monitor
# For me, I had to run this particular command
output eDP-1 mode 2560x1600@165.019hz
# To help find out your output name, install arandr, then run it
dnf install arandr
arandr
# You can add this line to your sway config to make things easier.
nano ~/.config/sway/config

## Using sway but can't figure out why gparted won't open?
# Wayland doesn't allow root but gparted requires it!
# Here's a workaround.
sudo -E gparted

#------------------------------------------------------------
### Virtualization
## Installing QEMU/KVM/Libvirt for VMs with little overhead.
dnf install qemu qemu-kvm virt-manager libvirt bridge-utils
# Enable and check the service
sudo systemctl start libvirtd
sudo systemctl enable libvirtd
systemctl status libvirtd
# Add your user to the required groups
usermod -aG kvm username
usermod -aG libvirt username

#------------------------------------------------------------
### Chat Clients
## Signal Desktop
# You may be apprehensive using the flatpak signal repo like I was
# There is another alternative, you can use the OpenSUSE Fedora repo
# Add the repo and install signal-desktop
# Note: The repo seems to be trustworthy, as of my checking it was running the latest version of Signal
sudo dnf config-manager addrepo --from-repofile=https://download.opensuse.org/repositories/network:im:signal/Fedora_42/network:im:signal.repo
sudo dnf install signal-desktop

# You can now run the Signal with the signal-desktop command
signal-desktop

#------------------------------------------------------------
### File managers
## Czkawka GUI
# Install the dependencies
sudo dnf install gtk4-devel libheif-devel LibRaw-devel libavif-devel libdav1d-devel

# Clone czkawka
git clone https://github.com/qarmin/czkawka.git
cd czkawka

# Compile with cargo
cargo run --release --bin czkawka_gui
# Or with support for heif, libraw, libavif
cargo run --release --bin czkawka_gui --features "heif,libraw,libavif"

## Fsearch
dnf copr enable cboxdoerfer/fsearch
dnf install fsearch

#------------------------------------------------------------
### Drive utilities
## smartmontools
sudo dnf install smartmontools

# Enable smartd service and make sure service starts
systemctl enable smartd
systemctl start smartd
systemctl status smartd

# Show drive SMART information
sudo smartctl -i /dev/nvme0n1
sudo smartctl -i /dev/sda

# Show drive overall-health self-assessment test result
sudo smartctl -x /dev/nvme1n1
sudo smartctl -x /dev/sda

## blivet-gui
dnf install blivet-gui

# blivet-gui has problems with Wayland like so many other GUI programs
# Here is my workaround, as I could not get a polkit to work properly

# Allow root to use your display temporarily
xhost +SI:localuser:root

# Run blivet-gui as root with environment preserved
sudo -E blivet-gui

# Revoke access afterward
xhost -SI:localuser:root

#------------------------------------------------------------
### Programming languages & IDEs
## Install Rust via rustup
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

# Verify that cargo is installed
cargo -V

# Update rustup
rustup update

# Install just for justfile integration
cargo install just

#------------------------------------------------------------
